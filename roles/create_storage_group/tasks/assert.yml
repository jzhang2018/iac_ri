---

# Assertion gets called when a new storage group is created with newly created volumes defined in inventory
- name: Get newly created storage group details including volumes
  dellemc.powermax.storagegroup:
    unispherehost: "{{ unispherehost }}"
    universion: "{{ universion }}"
    user: "{{ user }}"
    password: "{{ password }}"
    verifycert: "{{ verifycert }}"
    serial_no: "{{ serial_no }}"
    sg_name: "{{ cluster_name }}_SG"
    state: 'present'
  register: assert_sg

- name: Print out newly created storage group details including volumes
  ansible.builtin.debug:
    msg: "{{ assert_sg }}"
  when: debug_mode | default(false)

- name: Initialize an empty list for composing volume id
  ansible.builtin.set_fact:
    composed_volume_ids: []

- name: Append volume id to a list based on the inventory and naming convention
  ansible.builtin.set_fact:
    composed_volume_ids: "{{ composed_volume_ids + [cluster_name + '_DATA.' + item | string] }}"
  loop: "{{ range(0, volume_index, 1) | list }}"

- name: Print out composed volume id list
  ansible.builtin.debug:
    msg: "{{ composed_volume_ids }}"
  when: debug_mode | default(false)

- name: Assert multiple conditions separately - storage group with volumes
  ansible.builtin.assert:
    that: "{{ item.condition }}"
    fail_msg: "{{ item.msg }}"
    success_msg: "This assertion passed!"
  loop:
    - { condition: "(cluster_name + '_SG') == assert_sg.storage_group_details.storageGroupId", msg: "storage group name does not match expected value" }
    - { condition: "volume_index == assert_sg.storage_group_details.num_of_vols", msg: "volume count does not match expected value" }
    - { condition: "((( assert_sg.storage_group_volumes_details | map(attribute = 'volume_identifier') | list) | map('lower')) | sort) == ((composed_volume_ids | map('lower')) | sort)",
        msg: "volume ids do not match expected values" }

